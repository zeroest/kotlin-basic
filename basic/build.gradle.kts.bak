import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("org.springframework.boot") version "2.7.0"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    id("org.jetbrains.kotlin.jvm") version "1.6.21"
//    id("org.jetbrains.kotlin.plugin.allopen") version "1.6.21"

    kotlin("plugin.spring") version "1.6.21"
    kotlin("plugin.jpa") version "1.6.21"
}

/*
allOpen {
    // spring proxy 방식 사용으로 인해 기본적으로 상속이 필요함
    // 따라서 상속이 필요한 클래스의 어노테이션을 명시한다.
    // 그러나 매번 어노테이션 마다 선언하기 어려우니
    // kotlin("plugin.spring") version "1.6.21" -> 플러그인을 통해 cglib 프록시를 사용하는 모든 어노테이션에대해 allOpen 처리함
    annotations("org.springframework.boot.autoconfigure.SpringBootApplication",
        "org.springframework.transaction.annotation.Transactional")
}
*/

group = "me.zeroest.kotlin.basic"
version = "0.0.0"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    runtimeOnly("com.h2database:h2")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.withType<KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict")
        jvmTarget = "17"
    }
}
